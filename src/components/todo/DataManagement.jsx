import React, { useState, useRef } from 'react'
import { useTodo } from '../../contexts/TodoContext'
import { Button } from '../ui/Button'
import { exportToJSON, exportToCSV, importFromJSON, importFromCSV } from '../../utils/dataExport'

export function DataManagement() {
  const { state, actions } = useTodo()
  const [isImporting, setIsImporting] = useState(false)
  const [importMessage, setImportMessage] = useState('')
  const fileInputRef = useRef(null)

  const handleExportJSON = () => {
    exportToJSON({
      todos: state.todos,
      exportDate: new Date().toISOString(),
      version: '1.0'
    })
  }

  const handleExportCSV = () => {
    exportToCSV(state.todos)
  }

  const handleImportClick = () => {
    fileInputRef.current?.click()
  }

  const handleFileChange = async (e) => {
    const file = e.target.files?.[0]
    if (!file) return

    setIsImporting(true)
    setImportMessage('')

    try {
      let importedTodos = []
      
      if (file.name.endsWith('.json')) {
        importedTodos = await importFromJSON(file)
      } else if (file.name.endsWith('.csv')) {
        importedTodos = await importFromCSV(file)
      } else {
        throw new Error('Ch·ªâ h·ªó tr·ª£ file JSON v√† CSV')
      }

      if (importedTodos.length === 0) {
        throw new Error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ª£p l·ªá trong file')
      }

      // Ask user if they want to replace or merge
      const shouldReplace = window.confirm(
        `T√¨m th·∫•y ${importedTodos.length} todo items.\n\nB·∫°n mu·ªën:\n- OK: Thay th·∫ø ho√†n to√†n d·ªØ li·ªáu hi·ªán t·∫°i\n- Cancel: Th√™m v√†o d·ªØ li·ªáu hi·ªán t·∫°i`
      )

      if (shouldReplace) {
        // Replace all todos
        actions.reorderTodos(importedTodos)
        setImportMessage(`‚úÖ ƒê√£ thay th·∫ø th√†nh c√¥ng ${importedTodos.length} todo items`)
      } else {
        // Merge with existing todos
        const mergedTodos = [...state.todos, ...importedTodos]
        actions.reorderTodos(mergedTodos)
        setImportMessage(`‚úÖ ƒê√£ th√™m th√†nh c√¥ng ${importedTodos.length} todo items`)
      }
    } catch (error) {
      setImportMessage(`‚ùå L·ªói: ${error.message}`)
    } finally {
      setIsImporting(false)
      e.target.value = '' // Reset file input
    }
  }

  const handleClearAllData = () => {
    const confirmed = window.confirm(
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu?\n\nH√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!'
    )
    
    if (confirmed) {
      const doubleConfirmed = window.confirm(
        'X√°c nh·∫≠n l·∫ßn cu·ªëi: X√≥a to√†n b·ªô d·ªØ li·ªáu?'
      )
      
      if (doubleConfirmed) {
        actions.reorderTodos([])
        setImportMessage('üóëÔ∏è ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu')
      }
    }
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
      <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
        üíæ Qu·∫£n l√Ω d·ªØ li·ªáu
      </h2>
      
      <div className="space-y-4">
        <div>
          <h3 className="font-medium mb-2">Xu·∫•t d·ªØ li·ªáu</h3>
          <div className="flex flex-wrap gap-2">
            <Button
              variant="primary"
              size="sm"
              onClick={handleExportJSON}
              disabled={state.todos.length === 0}
            >
              üì• Xu·∫•t JSON
            </Button>
            
            <Button
              variant="secondary"
              size="sm"
              onClick={handleExportCSV}
              disabled={state.todos.length === 0}
            >
              üìä Xu·∫•t CSV
            </Button>
          </div>
          {state.todos.length === 0 && (
            <p className="text-sm text-gray-500 mt-1">
              Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t
            </p>
          )}
        </div>

        <div>
          <h3 className="font-medium mb-2">Nh·∫≠p d·ªØ li·ªáu</h3>
          <div className="flex flex-wrap gap-2 items-center">
            <Button
              variant="outline"
              size="sm"
              onClick={handleImportClick}
              disabled={isImporting}
            >
              {isImporting ? '‚è≥ ƒêang nh·∫≠p...' : 'üì§ Nh·∫≠p t·ª´ file'}
            </Button>
            
            <Button
              variant="danger"
              size="sm"
              onClick={handleClearAllData}
              disabled={state.todos.length === 0}
            >
              üóëÔ∏è X√≥a t·∫•t c·∫£
            </Button>
          </div>
          
          <input
            ref={fileInputRef}
            type="file"
            accept=".json,.csv"
            onChange={handleFileChange}
            className="hidden"
          />
          
          <p className="text-xs text-gray-500 mt-1">
            H·ªó tr·ª£ file JSON v√† CSV
          </p>
          
          {importMessage && (
            <div className={`
              mt-2 p-2 rounded text-sm
              ${importMessage.includes('‚ùå') 
                ? 'bg-red-50 text-red-700 border border-red-200' 
                : 'bg-green-50 text-green-700 border border-green-200'
              }
            `}>
              {importMessage}
            </div>
          )}
        </div>

        <div className="pt-2 border-t">
          <p className="text-xs text-gray-500">
            üìã Hi·ªán c√≥ {state.todos.length} todo items ‚Ä¢ 
            Ho√†n th√†nh: {state.todos.filter(t => t.completed).length} ‚Ä¢ 
            C√≤n l·∫°i: {state.todos.filter(t => !t.completed).length}
          </p>
        </div>
      </div>
    </div>
  )
} 